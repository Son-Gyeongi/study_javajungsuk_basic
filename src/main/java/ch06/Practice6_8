문제 6_8
생성자에 대한 설명
1. 모든 생성자의 이름은 클래스의 이름과 동일해야한다.
2. 객체를 초기화할 목적으로 사용된다.
3. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
4. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다.
5. 생성자도 오버로딩이 가능해서 하난의 클래스에 여러 개의 생성자를 정의할 수 있다.

문제 6_9
this에 대한 설명
1. 객체 자신을 가리키는 참조변수이다.
2. 인스턴스 메서드에서만 사용가능
-> 클래스 멤버(static이 붙은 변수나 메서드)에는 사용할 수 없다.
-> this는 인스턴스 자신의 주소를 저장하고 있으며, 모든 인스턴스메서드에 숨겨진 채로 존재하는 지역변수이다.
그래서 인스턴스메서드 내에서만 사용할 수 있다.
3. 지역변수와 인스턴스 변수를 구별할 때 사용한다.
4. 클래스 메서드 내에서는 사용할 수 없다.

문제 6_10
오버로딩 성립 조건
1. 메서드의 이름이 같아야 한다.
2. 매개변수의 개수나 타입이 달라야 한다.
3. 리턴타입은 오버로딩에 영향을 주지 못한다.

문제 6_11
오버로딩
// 모두 메서드의 이름이 add이고 매개변수의 타입이 다르므로 오버로딩이 성립
long add(int a, int b) { return a+b; }
long add(long a, long b) { return a+b; }
int add(byte a, byte b) { return a+b; }
int add(long a, int b) { return (int)(a+b); }

문제 6_12
초기화에 대한 설명
1. 멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참조할 수 있다.
2. 지역변수는 사용하기 전에 반드시 초기화해야 한다.
3. 생성자보다 초기화 블럭이 먼저 수행된다.
4. 명시적 초기화를 제일 우선적으로 고려해야 한다.
5. 인스턴스변수보다 클래스변수가 먼저 초기화된다.
-> 클래스변수는 클래스가 처음 메모리에 로딩될 때, 자동 초기화되므로 인스턴스 변수보다 먼저 초기화된다.

문제 6_13
클래스변수의 초기화시점 : 클래스가 처음 로딩될 때 단 한번 초기화 된다.
인스턴스변수의 초기화시점 : 인스턴스가 생성될 때마다 각 인스턴스별로 초기화가 이루어진다.

클래스변수의 초기화 순서 : 기본값 -> 명시적초기화 -> 클래스 초기화 블럭
인스턴스 변수의 초기화 순서 : 기본값 -> 명시적초기화 -> 인스턴스 초기화 블럭 -> 생성자

문제 6_14
지역변수에 대한 설명
1. 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다.
2. 메서드의 매개변수로 선언된 변수도 지역변수이다.
3. 클래스변수나 인스턴스변수보다 메모리 부담이 적다.
-> 지역변수는 자동 초기화 되지 않기 때문에 사용하기 전에 반드시 적절한 값으로 초기화를 해주어야한다.
-> 지역변수는 자신이 선언된 블러이나 메서드가 종료되면 소멸되므로  메모리 부담이 적다.
-> 힙(heap)영역에는 인스턴스(인스턴스변수)가 생성되는 영역이며, 지역변수는 호출스택(call stack)에 생성된다.

문제 6_15
호출스택
1. 호출스택의 제일 위에 있는 메서드가 현재 수행중인 메서드이며, 호출스택 안의 나머지 메서드들은 대기상태이다.